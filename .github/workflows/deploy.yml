name: CI/CD Pipeline

on:
  push:
    branches-ignore:
      - documents # Exclude pushes to the "documents" branch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: self-hosted # Use Windows runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: Code/Frontend/package-lock.json # Ensure correct caching

      - name: Install Dependencies
        working-directory: ./Code/Frontend
        run: npm i

      - name: Build the Project
        working-directory: ./Code/Frontend
        run: npm run build

      - name: Run Unit Tests
        working-directory: ./Code/Frontend
        run: npm run test:unit

  docker-build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Display debugging information
      - name: Debug Info
        shell: pwsh
        run: |
          Write-Host "GitHub Repository: ${{ github.repository }}"
          Write-Host "Image Name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          Write-Host "Actor: ${{ github.actor }}"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},name-canonical=true
      
      # Simplified deployment confirmation
      - name: Confirm deployment
        shell: pwsh
        run: |
          Write-Host "âœ… Container successfully published to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:latest"
