name: CI/CD Pipeline

on:
  push:
    branches-ignore:
      - documents # Exclude pushes to the "documents" branch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: self-hosted # Use Windows runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: Code/Frontend/package-lock.json # Ensure correct caching

      - name: Install Dependencies
        working-directory: ./Code/Frontend
        run: npm i

      - name: Build the Project
        working-directory: ./Code/Frontend
        run: npm run build

      - name: Run Unit Tests
        working-directory: ./Code/Frontend
        run: npm run test:unit

  docker-build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Display debugging information
      - name: Debug Info
        shell: pwsh
        run: |
          Write-Host "GitHub Repository: ${{ github.repository }}"
          Write-Host "Image Name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          Write-Host "Actor: ${{ github.actor }}"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},name-canonical=true
      
      # Enhanced debug step to check the build-and-push outputs
      - name: Check outputs
        shell: pwsh
        run: |
          Write-Host "Available outputs from build-and-push:"
          Write-Host "Digest: ${{ steps.build-and-push.outputs.digest }}"
          Write-Host "Metadata: ${{ steps.build-and-push.outputs.metadata }}"
          Write-Host "ImageID: ${{ steps.build-and-push.outputs.imageID }}"
          Write-Host "All outputs: ${{ toJSON(steps.build-and-push.outputs) }}"
      
      # Improved image details extraction
      - name: Store image details
        id: image-details
        shell: pwsh
        run: |
          # Format image name correctly
          $imageName = "${{ env.REGISTRY }}/${{ github.repository }}".ToLower()
          echo "IMAGE_NAME=$imageName" >> $env:GITHUB_OUTPUT
          Write-Host "Image Name: $imageName"
          
          # Try to get digest from build output first
          $digest = "${{ steps.build-and-push.outputs.digest }}"
          
          if ($digest) {
            Write-Host "Found digest from build output: $digest"
            echo "IMAGE_DIGEST=$digest" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "No digest in build output, attempting to get from Docker"
            # Get latest image
            $latestTag = "$imageName`:latest"
            docker pull $latestTag
            
            # Get full repo digest (includes repo name and digest)
            $repoDigest = $(docker inspect $latestTag --format='{{index .RepoDigests 0}}')
            Write-Host "Full repo digest: $repoDigest"
            
            if ($repoDigest) {
              # Extract just the sha256 part
              $digest = ($repoDigest -split '@')[1]
              if ($digest) {
                Write-Host "Extracted digest: $digest"
                echo "IMAGE_DIGEST=$digest" >> $env:GITHUB_OUTPUT
              } else {
                Write-Host "Failed to extract digest from repo digest: $repoDigest"
                echo "IMAGE_DIGEST=" >> $env:GITHUB_OUTPUT
              }
            } else {
              Write-Host "No repo digest found for image"
              echo "IMAGE_DIGEST=" >> $env:GITHUB_OUTPUT
            }
          }
      
      # Explicit validation step before attestation
      - name: Validate image details
        shell: pwsh
        run: |
          $imageName = "${{ steps.image-details.outputs.IMAGE_NAME }}"
          $digest = "${{ steps.image-details.outputs.IMAGE_DIGEST }}"
          
          Write-Host "Validation - Image Name: $imageName"
          Write-Host "Validation - Image Digest: $digest"
          
          if (-not $imageName) {
            Write-Host "::error::Image name is empty or undefined"
            exit 1
          }
          
          if (-not $digest) {
            Write-Host "::warning::Image digest is empty or undefined - attestation will be skipped"
          }
      
      # Only run attestation if digest is available and valid
      - name: Generate artifact attestation
        if: ${{ steps.image-details.outputs.IMAGE_DIGEST != '' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.image-details.outputs.IMAGE_NAME }}
          subject-digest: ${{ steps.image-details.outputs.IMAGE_DIGEST }}
          push-to-registry: true
      
      # Final confirmation message
      - name: Deployment status
        shell: pwsh
        run: |
          $imageName = "${{ steps.image-details.outputs.IMAGE_NAME }}"
          $digest = "${{ steps.image-details.outputs.IMAGE_DIGEST }}"
          
          if ($digest) {
            Write-Host "✅ Container successfully published to $imageName with digest $digest"
            Write-Host "✅ Attestation was generated for this container"
          } else {
            Write-Host "⚠️ Container published to $imageName but no digest was found"
            Write-Host "⚠️ Attestation was not generated for this container"
