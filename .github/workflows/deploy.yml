name: CI/CD Pipeline

on:
  push:
    branches-ignore:
      - documents # Exclude pushes to the "documents" branch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: self-hosted # Use Windows runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: Code/Frontend/package-lock.json # Ensure correct caching

      - name: Install Dependencies
        working-directory: ./Code/Frontend
        run: npm i

      - name: Build the Project
        working-directory: ./Code/Frontend
        run: npm run build

      - name: Run Unit Tests
        working-directory: ./Code/Frontend
        run: npm run test:unit

  docker-build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Display debugging information
      - name: Debug Info
        shell: pwsh
        run: |
          Write-Host "GitHub Repository: ${{ github.repository }}"
          Write-Host "Image Name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          Write-Host "Actor: ${{ github.actor }}"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},name-canonical=true
      
      # Enhanced debug step to check the build-and-push outputs
      - name: Check outputs
        shell: pwsh
        run: |
          Write-Host "Available outputs from build-and-push:"
          Write-Host "Digest: ${{ steps.build-and-push.outputs.digest }}"
          Write-Host "Metadata: ${{ steps.build-and-push.outputs.metadata }}"
          Write-Host "ImageID: ${{ steps.build-and-push.outputs.imageID }}"
          Write-Host "All outputs: ${{ toJSON(steps.build-and-push.outputs) }}"
          
          # Create a file with the digest for debugging
          if ("${{ steps.build-and-push.outputs.digest }}" -ne "") {
            "${{ steps.build-and-push.outputs.digest }}" | Out-File -FilePath digest.txt
            Get-Content digest.txt
          } else {
            Write-Host "No digest output found"
          }
      
      # Store image details for later use
      - name: Store image details
        id: image-details
        shell: pwsh
        run: |
          $imageName = "${{ env.REGISTRY }}/${{ github.repository }}"
          $imageName = $imageName.ToLower()
          echo "IMAGE_NAME=$imageName" >> $env:GITHUB_OUTPUT
          
          $digest = "${{ steps.build-and-push.outputs.digest }}"
          if ($digest -ne "") {
            echo "IMAGE_DIGEST=$digest" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Attempting to get digest from Docker"
            # Attempt to get digest from docker directly
            $latestTag = "$imageName`:latest"
            docker pull $latestTag
            $digest = (docker inspect $latestTag --format='{{index .RepoDigests 0}}' | Out-String).Trim() -replace "^.*@", ""
            if ($digest -ne "") {
              echo "IMAGE_DIGEST=$digest" >> $env:GITHUB_OUTPUT
              Write-Host "Retrieved digest: $digest"
            } else {
              Write-Host "Failed to get digest from Docker"
            }
          }
      
      # Only run attestation if digest is available
      - name: Generate artifact attestation
        if: ${{ steps.image-details.outputs.IMAGE_DIGEST != '' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.image-details.outputs.IMAGE_NAME }}
          subject-digest: ${{ steps.image-details.outputs.IMAGE_DIGEST }}
          push-to-registry: true
      
      # Alternative attestation if the standard one fails
      - name: Alternative attestation approach
        if: ${{ steps.image-details.outputs.IMAGE_DIGEST == '' }}
        shell: pwsh
        run: |
          Write-Host "Standard attestation skipped due to missing digest value."
          Write-Host "Your container has been published to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}"
